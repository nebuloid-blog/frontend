// Use SASS color extensions
@use 'sass:color';

/* SASS Functions */
// The decompose function helps manipulate colors more easily.
// It extrapolates a color's "shade", which is a tuple of colors.
// This "shade" can't be used without an rgb() or rgba() function.
//
// Once Dynamic Color Manipulation with CSS Relative Colors
//  is in spec for CSS in most browsers, we can remove this.
@function decompose($color) {
	$r: color.red($color);
	$g: color.green($color);
	$b: color.blue($color);
	$shade: ($r,$g,$b);
	@return $shade;
}

/* Color Settings & Variable Declarations */
:root {
	// Base CSS Variables
	--foreground-alpha: 100%;
	--background-alpha: 50%;
	--border-alpha: 75%;
}

// Color Schemes
@mixin light-mode {
	// Base CSS Variables
	--foreground-shade: #{decompose(black)};
	--background-shade: #{decompose(white)};
	--border-shade: #{decompose(#eaeaea)};

	// Derivitive CSS Variables
	--foreground-color: rgb(var(--foreground-shade));
	--background-color: rgb(var(--background-shade));
	--border-color: rgb(var(--border-shade));

	--foreground-clear: rgba(var(--foreground-shade), var(--foreground-alpha));
	--background-clear: rgba(var(--background-shade), var(--background-alpha));
	--border-clear: rgba(var(--border-shade), var(--border-alpha));

	color: var(--foreground-color);
	&#page-wrapper {
		background-color: var(--background-color);
	}

	.invert-in-light-mode {
		filter: invert(1)
	}
}

@mixin dark-mode {
	// Base CSS Variables
	--foreground-shade: #{decompose(white)};
	--background-shade: #{decompose(black)};
	--border-shade: #{decompose(#222)};

	// Derivitive CSS Variables
	--foreground-color: rgb(var(--foreground-shade));
	--background-color: rgb(var(--background-shade));
	--border-color: rgb(var(--border-shade));

	--foreground-clear: rgba(var(--foreground-shade), var(--foreground-alpha));
	--background-clear: rgba(var(--background-shade), var(--background-alpha));
	--border-clear: rgba(var(--border-shade), var(--border-alpha));

	color: var(--foreground-color);
	&#page-wrapper {
		background-color: var(--background-color);
	}

	.invert-in-dark-mode {
		filter: invert(1)
	}
}

[data-color-scheme='light'] {
	@include light-mode;
}

[data-color-scheme='dark'] {
	@include dark-mode;
}

[data-color-scheme='system'] {
	@media (prefers-color-scheme: light) {
		@include light-mode;
	}

	@media (prefers-color-scheme: dark) {
		@include dark-mode;
	}
}
